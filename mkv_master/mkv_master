#!/usr/bin/env python3

import click
import json
import os
import subprocess
import sys
import tempfile

from pymediainfo import MediaInfo
from tabulate import tabulate


def tmp_file(suffix):
    return tempfile.NamedTemporaryFile(prefix=os.getcwd() + os.path.sep, suffix='.' + suffix)


class WorkingDirectory:
    def __init__(self, path):
        self.path = path

    def __enter__(self):
        self.old_path = os.getcwd()
        os.chdir(self.path)

    def __exit__(self, type, value, traceback):
        os.chdir(self.old_path)


class Process:
    def __init__(self, name):
        self.name = name

    def run(self, args):
        all_args = [self.name] + args
        process = subprocess.run(all_args, stdout=sys.stdout, stderr=sys.stderr)


class MkvFile:
    def __init__(self, path):
        self.path = path
        self.audio_tracks = []

        media_info = MediaInfo.parse(self.path)
        for track in media_info.tracks:
            if track.track_type == 'Audio':
                self.audio_tracks.append({
                    'id': int(track.streamorder),
                    'format': track.format,
                    'channels': track.channel_s,
                    'language': track.language,
                    'bitrate': int(round(track.bit_rate / 1000))
                })

    def audio_tracks_as_table(self):
        audio_tracks_table = list(map(lambda t: [t['id'], t['format'], t['bitrate'], t['channels'], t['language'].upper()], self.audio_tracks))
        return tabulate(audio_tracks_table, headers=['Track ID', 'Format', 'Bitrate', 'Channels', 'Language'])

    def reencode_audio_track(self, track=None):
        output_filepath = os.path.splitext(self.path)[0] + '_new' + os.path.splitext(self.path)[1]
        with tmp_file('mka') as new_audio_file:
            self._encode_audio_file(self.path, new_audio_file.name)
            self._add_audio_file(new_audio_file.name, output_filepath)

    def _encode_audio_file(self, input_filepath, output_filepath):
        args = [
            '-y',
            '-i', input_filepath,
            '-vn',
            '-c:a', 'libfdk_aac',
            '-b:a', '640k',
            output_filepath
        ]

        ffmpeg = Process('ffmpeg')
        ffmpeg.run(args)

    def _add_audio_file(self, audio_filepath, output_filepath):
        args = [
            '-o', output_filepath,
            self.path,
            audio_filepath
        ]

        mkvmerge = Process('mkvmerge')
        mkvmerge.run(args)


@click.group()
def action():
    pass


@action.command()
@click.argument('file', nargs=1)
def inspect(file):
    mkv_file = MkvFile(file)
    print(mkv_file.audio_tracks_as_table())


@action.command(name='reencode_audio')
@click.argument('file', nargs=1)
@click.option('--track', '-t', default=None, required=False, help='Choose track ID. If not specified, ffmpeg chooses the best audio track.')
@click.option('--output', '-o', default=None, required=False, help='Output file name. Default: <INPUT>_new.mkv')
def reencode_audio(file, track, output):
    output = output or (os.path.splitext(file)[0] + '_new' + os.path.splitext(file)[1])

    mkv_file = MkvFile(file)
    mkv_file.reencode_audio_track(track=track)


if __name__ == '__main__':
    with WorkingDirectory('/opt'):
        action()
